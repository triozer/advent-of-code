#!/bin/sh

# This script is used to generate files for a new Advent of Code day.

# Require a day number as an argument.
if [ -z "$1" ]; then
    echo "Usage: $0 <day>"
    exit 1
fi

# It takes a single argument, the day number
day=$1

# pad day number with leading zero
padded_day=$(printf "%02d" "$day")

# If the file "solutions/src/main/kotlin/fr/triozer/aoc2022/days/Day$1.kt" already exists return an error
if [ -f "solutions/src/main/kotlin/fr/triozer/aoc2022/days/Day$padded_day.kt" ]; then
    echo "Error: Day $padded_day already exists"
    exit 1
fi

# Then it create a file "day-$1.md" in the directory "blog/docs/"
cat <<EOF > blog/docs/day-"$padded_day".md
# [Day $padded_day](https://adventofcode.com/2022/day/$day)

## Introduction

Explain briefly the challenge here.

### Input

<<< @/../../solutions/src/main/resources/day$day/test.in{txt}

### Other

::: details Click to view other
<<< @/../../solutions/src/main/kotlin/fr/triozer/aoc2022/days/Day$padded_day.kt#other{kotlin}
:::

## Part 1

<<< @/../../solutions/src/main/kotlin/fr/triozer/aoc2022/days/Day$padded_day.kt#part1{kotlin}

## Part 2

<<< @/../../solutions/src/main/kotlin/fr/triozer/aoc2022/days/Day$padded_day.kt#part1{kotlin}

## Conclusion

Lorem impsun dolor sit amet.

Difficulty: ⭐️ / ⭐️⭐️⭐️⭐️⭐️\\
Source
code: [Day$padded_day.kt](https://github.com/triozer/aoc-2022/tree/main/solutions/src/main/kotlin/fr/triozer/aoc2022/days/Day$padded_day.kt)
EOF
echo "Created article post: blog/docs/day-$padded_day.md"

# Then it edits the file "blog/docs/.vitepress/config.js" to add an item to the sidebar
{
    tail -r blog/docs/.vitepress/config.js | tail -n +5 | tail -r
    echo "        {"
    echo "          text: \"Day $padded_day\","
    echo "          link: \"/day-$padded_day\","
    echo "        },"
    tail -n4 blog/docs/.vitepress/config.js
} > blog/docs/.vitepress/config.js.tmp
mv blog/docs/.vitepress/config.js.tmp blog/docs/.vitepress/config.js
echo "Added Day $padded_day to sidebar: blog/docs/.vitepress/config.js"

# Then it creates a file "Day$1.kt" in the directory "solutions/src/main/kotlin/fr/triozer/aoc2022/days"
cat <<EOF > solutions/src/main/kotlin/fr/triozer/aoc2022/days/Day"$padded_day".kt
package fr.triozer.aoc2022.days

import fr.triozer.aoc2022.utils.readInput

// #region other
// #endregion other

// #region part1
private fun part1(input: List<String>) = 0
// #endregion part1

// #region part2
private fun part2(input: List<String>) = 0
// #endregion part2

private fun main() {
    val testInput = readInput($day, "test")
    check(part1(testInput) == 0)
    check(part2(testInput) == 0)

    println("Checks passed ✅")

    val input = readInput($day, "input")
    println(part1(input))
    println(part2(input))
}
EOF
echo "Created solution file: solutions/src/main/kotlin/fr/triozer/aoc2022/days/Day$padded_day.kt"

# And it creates two files "input.in" and "test.in" in the directory "solutions/src/resources/day$1"
mkdir -p solutions/src/main/resources/day"$day"
touch solutions/src/main/resources/day"$day"/input.in
echo "Created input file: solutions/src/main/resources/day$day/input.in"
touch solutions/src/main/resources/day"$day"/test.in
echo "Created test file: solutions/src/main/resources/day$day/test.in"
